
// autogenerated 

// fxp_size = 32
// fxp_frac = 12

module pwl_tanh(
     input clk,
     input rst,
     input  signed[32-1:  0] i_x,
     output signed[32-1:  0] o_res
);

     localparam fxp_size = 32;
     localparam fxp_frac = 12;

     localparam neg_inf = 32'b11111111111111111111000000000000 + 32'd1; // errors
     localparam pls_inf = 32'b00000000000000000001000000000000 - 32'd1; // errors

     logic signed[32-1:     0] result;
     logic signed[32-1:     0] clamped_result;
     assign o_res = result;
     assign clamped_result = (i_x & (32'b1 << 31))? neg_inf : pls_inf;

     logic[10: 0] deb;

     localparam a_0 = $signed(32'b00000000000000000000000000010000);
     localparam b_0 = $signed(32'b11111111111111111111000001010010);
     localparam l_0 = $signed(32'b11111111111111111100000000000000);
     localparam r_0 = $signed(32'b11111111111111111100111000111001);

     localparam a_1 = $signed(32'b00000000000000000000000001010001);
     localparam b_1 = $signed(32'b11111111111111111111000100011111);
     localparam l_1 = $signed(32'b11111111111111111100111000111001);
     localparam r_1 = $signed(32'b11111111111111111101110001110010);

     localparam a_2 = $signed(32'b00000000000000000000000111101011);
     localparam b_2 = $signed(32'b11111111111111111111010010100100);
     localparam l_2 = $signed(32'b11111111111111111101110001110010);
     localparam r_2 = $signed(32'b11111111111111111110101010101011);

     localparam a_3 = $signed(32'b00000000000000000000100000101000);
     localparam b_3 = $signed(32'b11111111111111111111110011110110);
     localparam l_3 = $signed(32'b11111111111111111110101010101011);
     localparam r_3 = $signed(32'b11111111111111111111100011100100);

     localparam a_4 = $signed(32'b00000000000000000000111100001010);
     localparam b_4 = $signed(32'b00000000000000000000000000000000);
     localparam l_4 = $signed(32'b11111111111111111111100011100100);
     localparam r_4 = $signed(32'b00000000000000000000011100011100);

     localparam a_5 = $signed(32'b00000000000000000000100000101000);
     localparam b_5 = $signed(32'b00000000000000000000001100001010);
     localparam l_5 = $signed(32'b00000000000000000000011100011100);
     localparam r_5 = $signed(32'b00000000000000000001010101010101);

     localparam a_6 = $signed(32'b00000000000000000000000111101011);
     localparam b_6 = $signed(32'b00000000000000000000101101011100);
     localparam l_6 = $signed(32'b00000000000000000001010101010101);
     localparam r_6 = $signed(32'b00000000000000000010001110001110);

     localparam a_7 = $signed(32'b00000000000000000000000001010001);
     localparam b_7 = $signed(32'b00000000000000000000111011100001);
     localparam l_7 = $signed(32'b00000000000000000010001110001110);
     localparam r_7 = $signed(32'b00000000000000000011000111000111);

     localparam a_8 = $signed(32'b00000000000000000000000000010000);
     localparam b_8 = $signed(32'b00000000000000000000111110101110);
     localparam l_8 = $signed(32'b00000000000000000011000111000111);
     localparam r_8 = $signed(32'b00000000000000000100000000000000);




     wire[32-1:    0] prod_0_next;
     logic[32-1:    0] prod_0;
     fixed_multiply#(
          .fractional_size(12),
          .operand_size(32),
          .expansion_size(0)
     ) ins_mul_0 (
          .i_a(i_x),
          .i_b(a_0),
          .o_res(prod_0_next)
     );

     always_ff @(posedge clk) begin
          if(rst)
               prod_0 <= '0;
          else
               prod_0 <= prod_0_next;
     end

     wire[32-1:    0] prod_1_next;
     logic[32-1:    0] prod_1;
     fixed_multiply#(
          .fractional_size(12),
          .operand_size(32),
          .expansion_size(0)
     ) ins_mul_1 (
          .i_a(i_x),
          .i_b(a_1),
          .o_res(prod_1_next)
     );

     always_ff @(posedge clk) begin
          if(rst)
               prod_1 <= '0;
          else
               prod_1 <= prod_1_next;
     end

     wire[32-1:    0] prod_2_next;
     logic[32-1:    0] prod_2;
     fixed_multiply#(
          .fractional_size(12),
          .operand_size(32),
          .expansion_size(0)
     ) ins_mul_2 (
          .i_a(i_x),
          .i_b(a_2),
          .o_res(prod_2_next)
     );

     always_ff @(posedge clk) begin
          if(rst)
               prod_2 <= '0;
          else
               prod_2 <= prod_2_next;
     end

     wire[32-1:    0] prod_3_next;
     logic[32-1:    0] prod_3;
     fixed_multiply#(
          .fractional_size(12),
          .operand_size(32),
          .expansion_size(0)
     ) ins_mul_3 (
          .i_a(i_x),
          .i_b(a_3),
          .o_res(prod_3_next)
     );

     always_ff @(posedge clk) begin
          if(rst)
               prod_3 <= '0;
          else
               prod_3 <= prod_3_next;
     end

     wire[32-1:    0] prod_4_next;
     logic[32-1:    0] prod_4;
     fixed_multiply#(
          .fractional_size(12),
          .operand_size(32),
          .expansion_size(0)
     ) ins_mul_4 (
          .i_a(i_x),
          .i_b(a_4),
          .o_res(prod_4_next)
     );

     always_ff @(posedge clk) begin
          if(rst)
               prod_4 <= '0;
          else
               prod_4 <= prod_4_next;
     end

     wire[32-1:    0] prod_5_next;
     logic[32-1:    0] prod_5;
     fixed_multiply#(
          .fractional_size(12),
          .operand_size(32),
          .expansion_size(0)
     ) ins_mul_5 (
          .i_a(i_x),
          .i_b(a_5),
          .o_res(prod_5_next)
     );

     always_ff @(posedge clk) begin
          if(rst)
               prod_5 <= '0;
          else
               prod_5 <= prod_5_next;
     end

     wire[32-1:    0] prod_6_next;
     logic[32-1:    0] prod_6;
     fixed_multiply#(
          .fractional_size(12),
          .operand_size(32),
          .expansion_size(0)
     ) ins_mul_6 (
          .i_a(i_x),
          .i_b(a_6),
          .o_res(prod_6_next)
     );

     always_ff @(posedge clk) begin
          if(rst)
               prod_6 <= '0;
          else
               prod_6 <= prod_6_next;
     end

     wire[32-1:    0] prod_7_next;
     logic[32-1:    0] prod_7;
     fixed_multiply#(
          .fractional_size(12),
          .operand_size(32),
          .expansion_size(0)
     ) ins_mul_7 (
          .i_a(i_x),
          .i_b(a_7),
          .o_res(prod_7_next)
     );

     always_ff @(posedge clk) begin
          if(rst)
               prod_7 <= '0;
          else
               prod_7 <= prod_7_next;
     end

     wire[32-1:    0] prod_8_next;
     logic[32-1:    0] prod_8;
     fixed_multiply#(
          .fractional_size(12),
          .operand_size(32),
          .expansion_size(0)
     ) ins_mul_8 (
          .i_a(i_x),
          .i_b(a_8),
          .o_res(prod_8_next)
     );

     always_ff @(posedge clk) begin
          if(rst)
               prod_8 <= '0;
          else
               prod_8 <= prod_8_next;
     end

     always_comb begin

          if(l_0 <= i_x && i_x < r_0) begin
               result = prod_0 + b_0;
               // deb = 0;
          end
     
          else if(l_1 <= i_x && i_x < r_1) begin
               result = prod_1 + b_1;
               // deb = 1;
          end
     
          else if(l_2 <= i_x && i_x < r_2) begin
               result = prod_2 + b_2;
               // deb = 2;
          end
     
          else if(l_3 <= i_x && i_x < r_3) begin
               result = prod_3 + b_3;
               // deb = 3;
          end
     
          else if(l_4 <= i_x && i_x < r_4) begin
               result = prod_4 + b_4;
               // deb = 4;
          end
     
          else if(l_5 <= i_x && i_x < r_5) begin
               result = prod_5 + b_5;
               // deb = 5;
          end
     
          else if(l_6 <= i_x && i_x < r_6) begin
               result = prod_6 + b_6;
               // deb = 6;
          end
     
          else if(l_7 <= i_x && i_x < r_7) begin
               result = prod_7 + b_7;
               // deb = 7;
          end
     
          else if(l_8 <= i_x && i_x < r_8) begin
               result = prod_8 + b_8;
               // deb = 8;
          end
     
          else begin // out of bounds 
               result = clamped_result;
               // deb = (i_x & (32'b1 << 31))? 90: 100;
          end

     end
endmodule
